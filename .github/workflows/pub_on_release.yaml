name: Publish on Docker Hub and Deploy

on: [ push ]

jobs:
  build_base:
    runs-on: [ ubuntu-latest ]
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    steps:
      - name: Login to docker.io
        run: echo '${{ secrets.DOCKER_PWD }}' | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - uses: actions/checkout@master

      - name: Build front base image
        run: docker build
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from $LOGIN/$NAME-front-base:${GITHUB_REF:11}
          --target builder-base
          --build-arg REACT_APP_API_URL=$REACT_APP_API_URL
          -t $LOGIN/$NAME-front-base:${GITHUB_REF:11}
          -f frontend/Dockerfile
          frontend
      - name: Push front base image to docker.io
        run: docker push $LOGIN/$NAME-front-base:${GITHUB_REF:11}

      - name: Build back base image
        run: docker build
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from $LOGIN/$NAME-back-base:${GITHUB_REF:11}
          --target builder-base
          -t $LOGIN/$NAME-back-base:${GITHUB_REF:11}
          -f backend/Dockerfile
          backend
      - name: Push back base image to docker.io
        run: docker push $LOGIN/$NAME-back-base:${GITHUB_REF:11}

  build:
    runs-on: [ ubuntu-latest ]
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    steps:
      - name: Upload repository
          uses: actions/upload-artifact@v4
          with:
            name: repository
            path: |
              ${{ github.workspace }}/infra

      - name: Login to docker.io
        run: echo '${{ secrets.DOCKER_PWD }}' | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - uses: actions/checkout@master

      - name: Build front image
        run: docker build
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from $LOGIN/$NAME-front-base:${GITHUB_REF:11}
          --cache-from $LOGIN/$NAME-front:${GITHUB_REF:11}
          --build-arg REACT_APP_API_URL=$REACT_APP_API_URL
          -t $LOGIN/$NAME-front:${GITHUB_REF:11}
          -f frontend/Dockerfile
          frontend
      - name: Push front image to docker.io
        run: docker push $LOGIN/$NAME-front:${GITHUB_REF:11}

      - name: Build back image
        run: docker build
          --build-arg BUILDKIT_INLINE_CACHE=1
          --cache-from $LOGIN/$NAME-back-base:${GITHUB_REF:11}
          --cache-from $LOGIN/$NAME-back:${GITHUB_REF:11}
          -t $LOGIN/$NAME-back:${GITHUB_REF:11}
          -f backend/Dockerfile
          backend
      - name: Push back image to docker.io
        run: docker push $LOGIN/$NAME-back:${GITHUB_REF:11}

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      LOGIN: ${{ secrets.DOCKER_LOGIN }}
      NAME: ${{ secrets.DOCKER_NAME }}
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    steps:
      - name: Login to docker.io
        run: echo '${{ secrets.DOCKER_PWD }}' | docker login -u ${{ secrets.DOCKER_LOGIN }} --password-stdin
      - uses: actions/checkout@master
      - name: Download repository
        uses: actions/download-artifact@v4
        with:
          name: repository
      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Install helm
        run: |
          curl -LO https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.8.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version
      - name: Lint helm charts
        run: helm lint ./infra
      - name: Deploy
        run: |
          helm upgrade --install myrelease ./infra -f ./infra/values.yaml
